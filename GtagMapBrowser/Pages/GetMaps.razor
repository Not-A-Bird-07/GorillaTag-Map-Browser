@inject HttpClient Http
@page "/getmaps"
@using Newtonsoft.Json

<PageTitle>Maps</PageTitle>
<MudContainer Class="text-center">
    <MudText Typo="Typo.h3" GutterBottom="true">There are @_filteredMaps.Count().ToString() maps listed</MudText>
</MudContainer>

@if (_maps == null)  
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudContainer Class="Options" Style="margin-bottom: 10px; padding: 5px; display: flex; justify-content: center;">
        <span style="align-self: center; margin-right: 10px;">Sort by:</span>
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
            <MudButton>@_sort</MudButton>
            <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                @foreach (var state in _states)
                {
                    <MudMenuItem OnClick="() => Sort(state)">@state</MudMenuItem>
                }
            </MudMenu>
        </MudButtonGroup>

        <span style="align-self: center; margin-left: 20px; margin-right: 10px;">Icon Size:</span>
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
            <MudButton>@_sizestring</MudButton>
            <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                @foreach (var size in _sizes)
                {
                    <MudMenuItem OnClick="() => Size(size.Value)">@size.Key</MudMenuItem>
                }
            </MudMenu>
        </MudButtonGroup>
    </MudContainer>
    
    <MudContainer Class="Search" Style="margin-bottom: 40px; padding: 5px; display: flex; justify-content: center;">
        
        <MudButton OnClick="Random" EndIcon="@Icons.Material.Filled.QuestionMark" Color="Color.Primary" Style="transform: translate(0, 8px);"></MudButton>
        
        <MudText Typo="Typo.body1">
            <MudTextField @bind-Value="TextValue" Label="Search" Variant="Variant.Text"></MudTextField>
        </MudText>
        
        <MudButton OnClick="Search" StartIcon="@Icons.Material.Filled.Search" Color="Color.Primary" Style="transform: translate(0, 8px);">Search</MudButton>
    </MudContainer>

    <MudGrid Justify=Justify.Center Class="Grid">
        @foreach (var item in _filteredMaps)
        {
            try
            {
                <div style="padding: 2px;">
                    <MudButton Variant="Variant.Text" Href="@item.Url" Target="_blank">
                        <MudCard class="hover-card" Style="@_cardStyle">
                            <MudCardMedia Image="@item.Image" Alt="@item.Name" class="hover-image"></MudCardMedia>
                            <div style="position: absolute; bottom: 0; left: 0; width: 100%; background-color: rgba(0, 0, 0, 0.2);">
                                <MudText Typo="Typo.subtitle1" Align="Align.Left" Style="padding: 2px; color: white;">
                                    @item.Name
                                </MudText>
                            </div>
                        </MudCard>
                    </MudButton>
                </div>

                <style>
                    .hover-card {
                        transition: transform 0.3s ease;
                    }
                    .hover-card:hover {
                        transform: scale(1.04);
                    }
                    .hover-image {
                        transition: opacity 0.3s ease;
                    }
                    .hover-card:hover .hover-image {
                        opacity: 0.7;
                    }
                </style>
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
    </MudGrid>
}

@code {
    List<Map> _maps = new List<Map>();
    List<Map> _filteredMaps = new List<Map>();
    string TextValue { get; set; }
    string _sort;
    string _cardStyle;
    string _sizestring;
    Random _random = new Random();

    Dictionary<string,int> _sizes = new ()
    {
        {"Small", 200},
        {"Medium", 250},
        {"Large", 300}
    };

    string[] _states =
    {
        "A-Z",
        "Z-A",
        "Curated"
    };

    protected override async Task OnInitializedAsync()
    {
        string url = "https://raw.githubusercontent.com/Not-A-Bird-07/Maps/refs/heads/main/Maps.json";
        string json = await Http.GetStringAsync(url);

        _maps = JsonConvert.DeserializeObject<List<Map>>(json);
        await Size(_sizes["Medium"]);
        await Sort("A-Z");
    }

    private async Task Size(int size)
    {
        _cardStyle = $"width: {size}px; height: {size}px; position: relative; border-radius: 15px; overflow: hidden;";
        _sizestring = _sizes.FirstOrDefault(x => x.Value == size).Key;
        StateHasChanged(); 
    }

    private async Task Search()
    {
        if (TextValue == "" || TextValue == null)
        {
            Sort(_sort);
        }//i hate this tbh
        else
        {
            _filteredMaps = _maps
                .Where(m => m.Name.Contains(TextValue, StringComparison.OrdinalIgnoreCase))
                .ToList();
            StateHasChanged();
        }
    }

    private async Task Random()
    {
        string randomMapName = _maps[_random.Next(0, _maps.Count)].Name;
        _filteredMaps = _maps
            .Where(m => m.Name.Contains(randomMapName, StringComparison.OrdinalIgnoreCase))
            .ToList();
        StateHasChanged();
    }

    private async Task Sort(string obj)
    {
        _sort = obj;
        _filteredMaps.Clear();
        if (_sort == "A-Z")
        {
            foreach (var map in _maps.OrderBy(map => map.Name).ToList())
            {
                _filteredMaps.Add(map);
            }
        }
        else if (_sort == "Z-A")
        {
            List<Map> temp = _maps.OrderBy(map => map.Name).ToList();
            temp.Reverse();
            foreach (var map in temp)
            {
                _filteredMaps.Add(map);
            }
        }
        else if (_sort == "Curated")
        {
            foreach (var map in _maps)
            {
                if (map.Good == true)
                {
                    _filteredMaps.Add(map);
                }
            }
        }

        StateHasChanged();
    }

    class Map
    {
        public string Name { get; set; }
        public string Image { get; set; }
        public string Url { get; set; }
        public bool Good { get; set; }
    }
}