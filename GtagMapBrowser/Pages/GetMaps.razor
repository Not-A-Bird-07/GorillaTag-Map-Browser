@inject HttpClient Http
@page "/getmaps"
@using Newtonsoft.Json

<PageTitle>Maps</PageTitle>
<MudContainer Class="text-center">
    <MudText Typo="Typo.h3" GutterBottom="true">There is @Maps.Count().ToString() Maps</MudText>
</MudContainer>

@if (Maps == null)  
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudSelect HelperText="Sort by" Dense="true" @bind-Value="_value" Style="margin-bottom: 40px;" TextChanged="Callback" Disabled="_isUpdating">
        @foreach (var state in _states)
        {
            <MudSelectItem Value="@state">@state</MudSelectItem>
        }
    </MudSelect>

    <MudGrid Justify=Justify.Center>
        @foreach (var item in FilteredMaps)
        {
            try
            {
                <div style="padding: 4px;">
                    <MudButton Variant="Variant.Text" Href=@item.Url Target="_blank">
                        <MudCard class="hover-card" Style="width: 300px; position: relative; border-radius: 15px; overflow: hidden;">
                            <MudCardMedia Image="@item.Image" Alt="@item.Name" class="hover-image"></MudCardMedia>
                            <div style="position: absolute; bottom: 0; left: 0; width: 100%; background-color: rgba(0, 0, 0, 0.2);">
                                <MudText Typo="Typo.subtitle1" Align="Align.Left" Style="padding: 2px; color: white;">
                                    @item.Name
                                </MudText>
                            </div>
                        </MudCard>
                    </MudButton>
                </div>

                <style>
                    .hover-card {
                        transition: transform 0.3s ease;
                    }
                    .hover-card:hover {
                        transform: scale(1.02);
                    }
                    .hover-image {
                        transition: opacity 0.3s ease;
                    }
                    .hover-card:hover .hover-image {
                        opacity: 0.7;
                    }
                </style>
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
    </MudGrid>
}

@code {
    List<Map> Maps = new List<Map>();
    List<Map> FilteredMaps = new List<Map>();
    string _value;
    bool _isUpdating = false;

    string[] _states =
    {
        "None",
        "Name"
    };

    protected override async Task OnInitializedAsync()
    {
        string url = "https://raw.githubusercontent.com/Not-A-Bird-07/Maps/refs/heads/main/Maps.json";
        string json = await Http.GetStringAsync(url);

        Maps = JsonConvert.DeserializeObject<List<Map>>(json);
        
        _value = "None";
    }

    private async Task Callback(string obj)
    {
        _isUpdating = true;
    
        _value = obj;
        FilteredMaps.Clear();
    
        if (_value == "None")
        {
            foreach (var map in Maps)
            {
                FilteredMaps.Add(map);
            }
        }
        else if (_value == "Name")
        {
            foreach (var map in Maps.OrderBy(map => map.Name).ToList())
            {
                FilteredMaps.Add(map);
            }
        }
        StateHasChanged();  
        _isUpdating = false;
    }

    class Map
    {
        public string Name { get; set; }
        public string Image { get; set; }
        public string Url { get; set; }
    }
}